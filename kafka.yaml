AWSTemplateFormatVersion: 2010-09-09
Resources:
  ZookeeperKafka:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: "awsvpc"
      Cpu: 512
      Memory: 1024
      ContainerDefinitions:
        - Name: "Zookeeper"
          Image: "wurstmeister/zookeeper"
          PortMappings:
            - ContainerPort: 2181
              HostPort: 2181
              Protocol: "TCP"
          Environment:
            - Name: "ZOO_MY_ID"
              Value: "1"
            - Name: "ZOO_SERVERS"
              Value: "server.1=1.zookeeper.com:2181"
          Memory: 512
        - Name: "Kafka"
          Image: "wurstmeister/kafka"
          Command:
            - "/bin/bash"
            - "-c"
            - "export KAFKA_LISTENERS=PLAINTEXT://$(hostname -i):9092 && /usr/bin/start-kafka.sh"
          PortMappings:
            - ContainerPort: 9092
              HostPort: 9092
              Protocol: "TCP"
          Environment:
            - Name: "KAFKA_ZOOKEEPER_CONNECT"
              Value: "127.0.0.1:2181"
          Memory: 512
          DependsOn:
            - Condition: "START"
              ContainerName: "Zookeeper"

  DevCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "dev-test"

  ZookeeperKafkaService:
    DependsOn: ELBKafkaListener
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "Kafka-Zookeeper"
      Cluster: !Ref DevCluster
      DesiredCount: 1
      SchedulingStrategy: "REPLICA"
      TaskDefinition: !Ref ZookeeperKafka
      LaunchType: "FARGATE"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "DISABLED"
          SecurityGroups:
            - !Ref KafkaSG
          Subnets:
            - !Ref PrivateSubnet
      LoadBalancers:
        - ContainerName: "Kafka"
          ContainerPort: 9092
          TargetGroupArn: !Ref KafkaTG

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/20"
      EnableDnsHostnames: true
      EnableDnsSupport: true



  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.2.0/26"
      VpcId: !Ref VPC
      AvailabilityZone: "sa-east-1a"

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet

  PrivateSubnetNatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc




  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.1.0/26"
      VpcId: !Ref VPC
      AvailabilityZone: "sa-east-1a"

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnetIGWRoute:
    DependsOn: InternetGatewayAttach
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  InternetGateway:
    DependsOn: VPC
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttach:
    DependsOn:
      - InternetGateway
      - VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "kafka-lb"
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnet
      Type: "network"

  ELBKafkaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 9092
      Protocol: "TCP"
      LoadBalancerArn: !Ref ELB
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref KafkaTG


  KafkaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "kafka-sg"
      GroupDescription: "Network security group for kafka services"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "-1"
          ToPort: "-1"
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "9092"
          ToPort: "9092"
          IpProtocol: "TCP"


  KafkaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "kafka-tg"
      Port: 9092
      Protocol: "TCP"
      TargetType: "ip"
      VpcId: !Ref VPC